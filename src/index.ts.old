import { LoginPage } from './pages/login';
import { RegistrationPage } from './pages/registration';
import { ProfilePage } from './pages/profile';
import { ProfileEditPasswordPage } from './pages/profile/edit/password';
import { ProfileEditUserPage } from './pages/profile/edit/user';
import { ProfileEditAvatarPage } from './pages/profile/edit/avatar';
import { ChatsPage } from './pages/chat';
import { Error404 } from './pages/errors/404';
import Router  from './utils/Router';
import AuthController from './controllers/AuthController';
import { Routes } from './interfaces/routes';
import store from './utils/Store';

window.addEventListener('DOMContentLoaded', async () => {
  
  try {
    await AuthController.fetchUser();
    store.set('IsSigned', true);
  } catch (e) {
    store.set('IsSigned', false);
  }

  Router
  .use(Routes.Chat, ChatsPage, true)  
  .use(Routes.Index, LoginPage, false)
  .use(Routes.Registration, RegistrationPage, false)
  .use(Routes.Profile, ProfilePage, false)
  .use(Routes.EditPassword, ProfileEditPasswordPage, false)
  .use(Routes.EditUser, ProfileEditUserPage, false)
  .use(Routes.EditAvatar, ProfileEditAvatarPage, false)
  .onError(Error404)
  .setAuthorizationChecker(() => store.getState().IsSigned ?? false)
  .start();

});
